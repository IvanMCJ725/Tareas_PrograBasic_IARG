def resolver_orden_vacas():
    # Todas las vacas que hay, ya ordenadas alfab√©ticamente
    lista_de_vacas = ['Beatrice', 'Bella', 'Belinda', 'Bessie', 'Betsy', 'Blue', 'Buttercup', 'Sue']
    
    # Leer cu√°ntas reglas tenemos
    cuantas_reglas = int(input())
    
    # Aqu√≠ vamos a guardar las reglas (qu√© vacas tienen que estar juntas)
    reglas = []
    
    # Leer cada regla
    for i in range(cuantas_reglas):
        oracion = input().strip()
        # La oraci√≥n es como "Buttercup must be milked beside Bella"
        # Separamos las palabras y sacamos los nombres
        palabras = oracion.split()
        primera_vaca = palabras[0]  # Primera palabra es la primera vaca
        segunda_vaca = palabras[5]  # La sexta palabra es la segunda vaca
        reglas.append((primera_vaca, segunda_vaca))
    
    # Funci√≥n para ver si un orden de vacas cumple todas las reglas
    def cumple_las_reglas(orden_de_vacas):
        # Revisar cada regla una por una
        for vaca_a, vaca_b in reglas:
            # Buscar en qu√© posici√≥n est√° cada vaca
            donde_esta_a = orden_de_vacas.index(vaca_a)
            donde_esta_b = orden_de_vacas.index(vaca_b)
            
            # Ver si est√°n una al lado de la otra
            distancia = abs(donde_esta_a - donde_esta_b)
            if distancia != 1:  # Si no est√°n juntas, no sirve este orden
                return False
        return True  # Si todas las reglas se cumplen, est√° bien
    
    # Funci√≥n que prueba todos los √≥rdenes posibles (recursiva)
    def probar_ordenes(orden_hasta_ahora, vacas_que_faltan):
        # Si ya pusimos todas las vacas
        if len(vacas_que_faltan) == 0:
            # Verificar si este orden cumple todas las reglas
            if cumple_las_reglas(orden_hasta_ahora):
                return orden_hasta_ahora[:]  # Devolver este orden (funciona!)
            else:
                return None  # Este orden no sirve
        
        # Probar con cada vaca que nos falta (en orden alfab√©tico)
        for vaca in sorted(vacas_que_faltan):
            # Poner esta vaca en el siguiente lugar
            orden_hasta_ahora.append(vaca)
            
            # Hacer una lista nueva sin esta vaca
            vacas_restantes = vacas_que_faltan[:]
            vacas_restantes.remove(vaca)
            
            # Seguir probando con las vacas que quedan
            resultado = probar_ordenes(orden_hasta_ahora, vacas_restantes)
            
            # Si encontramos un orden que funciona, lo devolvemos
            if resultado is not None:
                return resultado
            
            # Si no funcion√≥, quitamos esta vaca e intentamos con otra
            orden_hasta_ahora.pop()
        
        # Si ninguna vaca funcion√≥ aqu√≠, no hay soluci√≥n
        return None
    
    # Empezar a buscar desde cero
    orden_final = probar_ordenes([], lista_de_vacas[:])
    
    # Mostrar el resultado
    if orden_final:
        for vaca in orden_final:
            print(vaca)
    else:
        print("No se pudo encontrar un orden que funcione")

# Funci√≥n para probar con el ejemplo
def probar_ejemplo():
    import io
    import sys
    
    ejemplo_input = """3
Buttercup must be milked beside Bella
Blue must be milked beside Bella
Sue must be milked beside Beatrice"""
    
    # Cambiar la entrada temporalmente
    entrada_original = sys.stdin
    sys.stdin = io.StringIO(ejemplo_input)
    
    print("Probando con el ejemplo:")
    print("Restricciones:")
    print("- Buttercup debe estar junto a Bella")
    print("- Blue debe estar junto a Bella") 
    print("- Sue debe estar junto a Beatrice")
    print()
    print("Resultado:")
    resolver_orden_vacas()
    
    # Restaurar entrada
    sys.stdin = entrada_original

# Explicar c√≥mo funciona todo esto
def explicar_paso_a_paso():
    print("\n" + "="*50)
    print("¬øC√ìMO FUNCIONA ESTO?")
    print("="*50)
    print()
    print("üêÑ EL PROBLEMA:")
    print("   - Tenemos 8 vacas que hay que orde√±ar en cierto orden")
    print("   - Algunas vacas TIENEN que estar una al lado de la otra")
    print("   - Queremos el orden que sea primero alfab√©ticamente")
    print()
    print("üí° LA IDEA:")
    print("   - Probamos TODOS los √≥rdenes posibles")
    print("   - Los probamos en orden alfab√©tico (por eso sale el primero)")
    print("   - Para cada orden completo, verificamos si cumple las reglas")
    print("   - El primero que encuentre que funcione, ese es la respuesta")
    print()
    print("üîÑ C√ìMO PROBAMOS (RECURSI√ìN):")
    print("   1. Empezamos con una lista vac√≠a")
    print("   2. Elegimos la primera vaca (alfab√©ticamente)")
    print("   3. La ponemos en la lista")
    print("   4. Repetimos el proceso con las vacas que quedan")
    print("   5. Si al final no funciona, regresamos y probamos otra vaca")
    print()
    print("‚úÖ C√ìMO VERIFICAMOS LAS REGLAS:")
    print("   Para cada regla como 'Bella debe estar junto a Blue':")
    print("   - Buscamos d√≥nde est√° Bella en nuestro orden")
    print("   - Buscamos d√≥nde est√° Blue en nuestro orden") 
    print("   - Si la diferencia de posiciones es 1, est√°n juntas ‚úì")
    print("   - Si no, este orden no sirve ‚úó")
    print()
    print("üéØ EJEMPLO:")
    print("   Reglas: Buttercup-Bella, Blue-Bella, Sue-Beatrice")
    print("   Probamos: Beatrice, Bella, Belinda... ‚úó")
    print("   Probamos: Beatrice, Sue, Belinda... ‚úì (Sue est√° junto a Beatrice)")
    print("   Seguimos hasta completar todo el orden")

# Funci√≥n m√°s simple para probar
def probar_con_ejemplo():
    import io
    import sys
    
    ejemplo = """3
Buttercup must be milked beside Bella
Blue must be milked beside Bella
Sue must be milked beside Beatrice"""
    
    # Cambiar donde lee el programa
    entrada_vieja = sys.stdin
    sys.stdin = io.StringIO(ejemplo)
    
    print("üß™ PROBANDO EL EJEMPLO:")
    print("Reglas que tenemos:")
    print("‚Ä¢ Buttercup tiene que estar junto a Bella")
    print("‚Ä¢ Blue tiene que estar junto a Bella") 
    print("‚Ä¢ Sue tiene que estar junto a Beatrice")
    print()
    print("El orden que encontramos es:")
    resolver_orden_vacas()
    
    # Volver a como estaba
    sys.stdin = entrada_vieja

# Ejecutar todo
probar_con_ejemplo()
explicar_paso_a_paso()